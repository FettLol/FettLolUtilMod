plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenLocal()
    maven {
        name = "Shedaniel"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        name = "Cotton"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"
    }
}

loom {
    accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")
}

dependencies {
    // Minecraft and Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // Cloth-Config (Required dependency)
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // ModMenu (Suggested dependency)
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude module: 'fabric-api'
    }

}

processResources {
    // expand all properties from gradle.properties (plus version)
    def stringProperties = providers.gradlePropertiesPrefixedBy('').get() + ['version': version]
    stringProperties.each { inputs.property(it.key, it.value) }

    ['fabric.mod.json', "${project.mod_id}.mixins.json"].each {
        filesMatching(it) {
            expand(stringProperties) {
                escapeBackslash = true
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.compilerArgs.add('-Xlint:deprecation')
    it.options.release = project.java_version as Integer
}

java {
    targetCompatibility = sourceCompatibility = project.java_version as Integer
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {}
}
